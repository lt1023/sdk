/**
 * Generated by FakerAndroid for doc or help by https://github.com/Efaker/FakerAndroid
 */
#include <jni.h>
#include <string>
#include "common.h"
#include <fstream>
#include <sstream>
#include "include/faker.h"
#include <thread>

#ifdef DCIRDLL_EXPORTS
#ifdef PLATFORM_LINUX
#define MYDCIR_API __attribute__((visibility ("default")))  //Linux动态库(.so)
#else
#define MYDCIR_API __declspec(dllexport)//Windows动态库(.dll)
#endif
#else
#define MTDCIR_API
#endif



JavaVM *global_jvm;

#include <unistd.h>

jclass globalSDK;

const char* fuckname = "libminecraftpe.so";





__attribute__ ((visibility("hidden")))
void showRewardedAd(){
    JNIEnv* env;
    global_jvm->GetEnv(reinterpret_cast<void **>(&env), JNI_VERSION_1_4);
    jclass SDK = env->FindClass("com/anygames/sdk/SDK");
    jmethodID showRewardedAd = env->GetStaticMethodID(SDK,"showRewardedAd", "()V");
    env->CallStaticVoidMethod(SDK, showRewardedAd);
}



__attribute__ ((visibility("hidden")))
void showFullVideo(){
    JNIEnv* env;
    global_jvm->AttachCurrentThread(&env, nullptr);
    jmethodID showFullScreenVideo = env->GetStaticMethodID(globalSDK,"showFullScreenVideo", "()V");
    env->CallStaticVoidMethod(globalSDK, showFullScreenVideo);
    global_jvm->DetachCurrentThread();
}

__attribute__ ((visibility("hidden")))
static int mLoopPullUpTimes;
__attribute__ ((visibility("hidden")))
int getLoopPullUpTimes(){
    JNIEnv* env;
//    jint jenv = global_jvm->GetEnv(reinterpret_cast<void **>(&env), JNI_VERSION_1_4);
//    LOGE("jenv=%d",jenv);
    global_jvm->AttachCurrentThread(&env, nullptr);
    jmethodID getLoopPullUpTimes = env->GetStaticMethodID(globalSDK,"getLoopPullUpTimes", "()I");
    int result = env->CallStaticIntMethod(globalSDK, getLoopPullUpTimes);
    global_jvm->DetachCurrentThread();
    return result;
}

__attribute__ ((visibility("hidden")))
static  int adTimes = 0;

__attribute__ ((visibility("hidden")))
void checkAdTimes(){
    mLoopPullUpTimes = getLoopPullUpTimes();
    LOGE("mLoopPullUpTimes = %d",mLoopPullUpTimes);
    if (mLoopPullUpTimes == 0)return;
    adTimes++;
    if (adTimes % mLoopPullUpTimes == 0){
        showFullVideo();
    }
}

//static unsigned long find_database_of(const char* soName)//获取libcocos2dlua.so内存基址
//{
//    char filename[32];
//    char cmdline[256];
//    sprintf(filename, "/proc/%d/maps", getpid());
////    LOGD("filename = %s", filename);
//    FILE *fp = fopen(filename, "r");
//    unsigned long revalue = 0;
////    LOGE("fp = %d",fp == nullptr);
//    if (fp)
//    {
//        while(fgets(cmdline, 256, fp)) //逐行读取
//        {
////            LOGD("cmdline = %s",cmdline);
//            if(strstr(cmdline, soName) && strstr(cmdline, "r-xp"))//筛选
////            if (strstr(cmdline, soName) && strstr(cmdline, "r--p"))//筛选
//
////            if(strstr(cmdline, soName) )//筛选
//            {
//                char *str = strstr(cmdline,"-");
//                if(str)
//                {
//                    *str='\0';
//                    char num[32];
//                    sprintf(num, "0x%s", cmdline);
//                    revalue = strtoul( num, NULL, 0 );
////                    LOGD("revalue = %lu", revalue);
//                    fclose(fp);
//                    memset(cmdline,0,sizeof(cmdline)); //清零
//                    memset(filename,0,sizeof(filename)); //清零
//                    return revalue;
//                }
//            }
//            memset(cmdline,0,sizeof(cmdline)); //清零
//        }
//        memset(cmdline,0,sizeof(cmdline)); //清零
//        memset(filename,0,sizeof(filename)); //清零
////        LOGE("fflush");
//        fclose(fp);
//    }
//    return 0L;
//}

#include <iostream>
#include <fstream>
#include <sstream>

__attribute__ ((visibility("hidden")))
static unsigned long find_database_of(const char* soName)//获取libcocos2dlua.so内存基址
{
    char filename[32];
//    char cmdline[256];
    sprintf(filename, "/proc/%d/maps", getpid());
//    LOGD("filename = %s", filename);
    unsigned long revalue = 0;
    std::ifstream file;
    file.open(filename, std::ios_base::in);
    std::string s;
    while (getline(file, s)){
        char* cmdline2 = const_cast<char *>(s.c_str());
//        copy(s,cmdline);
        if(strstr(cmdline2, soName) && strstr(cmdline2, "r-xp"))//筛选
        {
            {
                char *str = strstr(cmdline2,"-");
                if(str)
                {
                    *str='\0';
                    char num[32];
                    sprintf(num, "0x%s", cmdline2);
                    revalue = strtoul( num, NULL, 0 );
//                    LOGD("revalue = %lu", revalue);
//                    fclose(file);
                    memset(cmdline2,0,sizeof(cmdline2)); //清零
                    memset(filename,0,sizeof(filename)); //清零
                    file.close();
                    return revalue;
                }
            }
            memset(cmdline2,0,sizeof(cmdline2)); //清零
        }
    }
    file.close();
    return 0L;
}


__attribute__ ((visibility("hidden")))
unsigned long baseAddr ;
//#include <chrono>
#include <thread>


bool isFromPauseScreen = false;
__attribute__ ((visibility("hidden")))
void HookedApplication_OpenURL(){}


void* (*MinecraftScreenModel_navigateToOptionsScreen)(void* obj, bool arg, int arg2) = nullptr;
__attribute__ ((visibility("hidden")))
void* HookedMinecraftScreenModel_navigateToOptionsScreen(void* obj,bool arg, int arg2){
    LOGE("HookedMinecraftScreenModel_navigateToOptionsScreen");
    return MinecraftScreenModel_navigateToOptionsScreen(obj,arg,arg2);
}


void* (*ScreenChooser_pushOptionsScreen)(void* obj, void* arg, void* arg2, void* arg3, void* arg4) = nullptr;
__attribute__ ((visibility("hidden")))
void* HookedScreenChooser_pushOptionsScreen(void* obj, void* arg, void* arg2, void* arg3, void* arg4){
    if (!isFromPauseScreen){
//        LOGE("ScreenChooser_pushOptionsScreen");
        checkAdTimes();
    }
    isFromPauseScreen = false;
    return ScreenChooser_pushOptionsScreen(obj,arg,arg2,arg3,arg4);
}

void* (*ScreenChooser_pushSkinsScreen)(void* obj) = nullptr;
__attribute__ ((visibility("hidden")))
void* HookedScreenChooser_pushSkinsScreen(void* obj){
//    LOGE("ScreenChooser_pushSkinsScreen");
    checkAdTimes();
    return ScreenChooser_pushSkinsScreen(obj);
}

void* (*ScreenChooser_navigateToPlayScreen)(void* obj) = nullptr;
__attribute__ ((visibility("hidden")))
void* HookedScreenChooser_navigateToPlayScreen(void* obj){
//    LOGE("ScreenChooser_navigateToPlayScreen");
    checkAdTimes();
    return ScreenChooser_navigateToPlayScreen(obj);

}

void* (*CreateWorldScreen_createWorldClicked)(void* obj) = nullptr;
__attribute__ ((visibility("hidden")))
void* HookedCreateWorldScreen_createWorldClicked(void* obj){
//    LOGE("CreateWorldScreen_createWorldClicked");
    checkAdTimes();
    return CreateWorldScreen_createWorldClicked(obj);
}

void* (*InventoryScreen_handleButtonPress)(void* obj) = nullptr;
__attribute__ ((visibility("hidden")))
void* HookedInventoryScreen_handleButtonPress(void* obj){
//    LOGE("InventoryScreen_handleButtonPress");
    checkAdTimes();
    return InventoryScreen_handleButtonPress(obj);
}


void* (*PauseScreen_handleButtonPress)(void* obj,void* arg) = nullptr;
__attribute__ ((visibility("hidden")))
void* HookedPauseScreen_handleButtonPress(void* obj,void* arg){
//    LOGE("PauseScreen_handleButtonPress:%d:%d", obj, arg);
    isFromPauseScreen = true;
    checkAdTimes();
    return PauseScreen_handleButtonPress(obj,arg);
}


__attribute__ ((visibility("hidden")))
void find_base_addr(){
    while(!baseAddr){
//        this_thread::sleep_for(std::chrono::seconds(1));
        baseAddr = find_database_of(fuckname);
//        baseAddr = baseImageAddr("libil2cpp.so");
    }
//    LOGE("baseImageAddr3 : %ld",baseAddr);
//    init_il2cpp(baseAddr);
//
//    long Application_OpenURL = baseAddr + ;
//    fakeCpp((void *) Application_OpenURL,
//            (void *) HookedApplication_OpenURL,
//            reinterpret_cast<void **>(&Application_OpenURL));

//MinecraftScreenModel::navigateToOptionsScreen(bool,int)	.text	003B63B8	00000064	00000030	FFFFFFE8	R	.	.	.	.	T	.
//    long add_MinecraftScreenModel_navigateToOptionsScreen = baseAddr + 0x03B63B8 + 1;
//    MinecraftScreenModel_navigateToOptionsScreen = reinterpret_cast<void* (*)(void*,bool,
//                                                                             int)>(add_MinecraftScreenModel_navigateToOptionsScreen);
//    fakeCpp((void *) add_MinecraftScreenModel_navigateToOptionsScreen,
//            (void *) HookedMinecraftScreenModel_navigateToOptionsScreen,
//            reinterpret_cast<void **>(&MinecraftScreenModel_navigateToOptionsScreen));



    //ScreenChooser::pushOptionsScreen(bool,bool,std::string const&,int)	.text	003B6348	0000006C	00000038	00000004	R	.	.	.	.	T	.
    long add_ScreenChooser_pushOptionsScreen = baseAddr + 0x003B6348 + 1;
    ScreenChooser_pushOptionsScreen = reinterpret_cast<void *(*)(void *, void *, void *, void *,
                                                                 void *)>(add_ScreenChooser_pushOptionsScreen);
    fakeCpp((void *) add_ScreenChooser_pushOptionsScreen,
            (void *) HookedScreenChooser_pushOptionsScreen,
            reinterpret_cast<void **>(&ScreenChooser_pushOptionsScreen));

    //ScreenChooser::pushSkinsScreen(void)	.text	003B6CF0	000000A0	00000038	FFFFFFE8	R	.	.	.	.	T	.
    long add_ScreenChooser_pushSkinsScreen = baseAddr + 0x003B6CF0 + 1;
    ScreenChooser_pushSkinsScreen = reinterpret_cast<void *(*)(
            void *)>(add_ScreenChooser_pushSkinsScreen);
    fakeCpp((void *) add_ScreenChooser_pushSkinsScreen,
            (void *) HookedScreenChooser_pushSkinsScreen,
            reinterpret_cast<void **>(&ScreenChooser_pushSkinsScreen));

    //MinecraftScreenModel::navigateToPlayScreen(void)	.text	00412420	00000010	00000008	FFFFFFF8	R	.	.	.	.	T	.
    //MinecraftScreenModel::navigateToStartScreen(void)	.text	003F83EC	00000010	00000008	FFFFFFF8	R	.	.	.	.	T	.
    //MinecraftScreenModel::navigateToGamePlayScreen(void)	.text	003B76B0	00000010	00000008	FFFFFFF8	R	.	.	.	.	T	.
    long add_ScreenChooser_navigateToPlayScreen = baseAddr + 0x00412420 + 1;
    ScreenChooser_navigateToPlayScreen = reinterpret_cast<void *(*)(
            void *)>(add_ScreenChooser_navigateToPlayScreen);
    fakeCpp((void *) add_ScreenChooser_navigateToPlayScreen,
            (void *) HookedScreenChooser_navigateToPlayScreen,
            reinterpret_cast<void **>(&ScreenChooser_navigateToPlayScreen));

    //CreateWorldScreen::_createWorldClicked(void)	.text	0035A268	0000007A	000000A0	FFFFFFA5	R	.	.	.	.	T	.
    long add_CreateWorldScreen_createWorldClicked = baseAddr + 0x0035A268 + 1;
    CreateWorldScreen_createWorldClicked = reinterpret_cast<void *(*)(
            void *)>(add_CreateWorldScreen_createWorldClicked);
    fakeCpp((void *) add_CreateWorldScreen_createWorldClicked,
            (void *) HookedCreateWorldScreen_createWorldClicked,
            reinterpret_cast<void **>(&CreateWorldScreen_createWorldClicked));


    //InventoryScreen::handleButtonPress(short)	.text	003D4A30	000002A2	00000038	FFFFFFE0	R	.	.	.	.	T	.
    long add_InventoryScreen_handleButtonPress = baseAddr + 0x003D4A30 + 1;
    InventoryScreen_handleButtonPress = reinterpret_cast<void *(*)(
            void *)>(add_InventoryScreen_handleButtonPress);
    fakeCpp((void *) add_InventoryScreen_handleButtonPress,
            (void *) HookedInventoryScreen_handleButtonPress,
            reinterpret_cast<void **>(&InventoryScreen_handleButtonPress));
    //PauseScreen::handleButtonPress(short)	.text	003858C4	00000290	00000038	FFFFFFE0	R	.	.	.	.	T	.
    long add_PauseScreen_handleButtonPress = baseAddr + 0x003858C4+ 1;
    PauseScreen_handleButtonPress = reinterpret_cast<void *(*)(
            void *,void *)>(add_PauseScreen_handleButtonPress);
    fakeCpp((void *) add_PauseScreen_handleButtonPress,
            (void *) HookedPauseScreen_handleButtonPress,
            reinterpret_cast<void **>(&PauseScreen_handleButtonPress));

//ScreenChooser::_pushScreen(std::shared_ptr<BaseScreen>,bool)	.text	0038CCF0	000000A8	00000020	FFFFFFF0	R	.	.	.	.	.	.
//ScreenChooser::pushskin


//PausePrevScreen InventoryScreen

//InventoryScreen::getItemFromType(InventoryScreen::InventoryPaneType)	.text	003784C8	0000008E	00000010	FFFFFFF0	R	.	.	.	.	T	.
//InventoryScreen::_buttonClicked(Button &)	.text	0041198C	0000039E	00000090	FFFFFFD8	R	.	.	.	.	T	.
//InventoryScreen::_updateCraftableItems(bool)	.text	00410D9C	00000206	00000028	FFFFFFE0	R	.	.	.	.	T	.
}


extern "C"
JNIEXPORT void JNICALL
Java_com_anygames_app_SDKWrapper_init(JNIEnv *env, jclass clazz, jobject application) {

}


__attribute__ ((visibility("hidden")))
void init(JNIEnv *env, jclass clazz, jobject application){
    jclass SDK = env->FindClass("com/anygames/sdk/SDK");
    globalSDK = static_cast<jclass>(env->NewGlobalRef(SDK));
    jmethodID init = env->GetStaticMethodID(SDK, "initSDK", "(Landroid/app/Application;)V");
    env->CallStaticVoidMethod(SDK, init, application);
    std::thread find_thread(find_base_addr);
    find_thread.detach();
}

__attribute__ ((visibility("hidden")))
void register_wrapper(JNIEnv *env, jclass clazz, jobject base){
    fakeDex(env, base, "conf");//dex collapse feature support
    jclass Context = env->GetObjectClass(base);
    jmethodID  getFilesDir = env->GetMethodID(Context, "getFilesDir", "()Ljava/io/File;");
    jobject file_dir = env->CallObjectMethod(base,getFilesDir );
//getAbsolutePath
    jclass file_dir_clz = env->GetObjectClass(file_dir);
    jmethodID  getAbsolutePath = env->GetMethodID(file_dir_clz, "getAbsolutePath","()Ljava/lang/String;");
    auto AbsolutePath = static_cast<jstring>(env->CallObjectMethod(file_dir, getAbsolutePath));
    const char* path_str = env->GetStringUTFChars(AbsolutePath, JNI_FALSE);
    std::string add_str(path_str);
    add_str.append("/target/classes.dex");
//    LOGE("AbsolutePath = %s",add_str.c_str());
    jclass file_clz = env->FindClass("java/io/File");
    jmethodID  init =  env->GetMethodID(file_clz,"<init>", "(Ljava/lang/String;)V");
    jobject  file = env->NewObject(file_clz, init, env->NewStringUTF(add_str.c_str()));
//    jmethodID  deleteFilesByDirectory  = env->GetStaticMethodID(clazz, "deleteFilesByDirectory", "(Ljava/io/File;)Z");
//    env->CallStaticBooleanMethod(clazz, deleteFilesByDirectory, file);

    jclass Tools_clz = env->FindClass("com/anygames/sdk/Tools");
    jmethodID deleteFilesByDirectory  = env->GetStaticMethodID(Tools_clz, "deleteFilesByDirectory", "(Ljava/io/File;)Z");
    env->CallStaticBooleanMethod(Tools_clz, deleteFilesByDirectory, file);

    fakeDex(env, base, "conf");//dex collapse feature support

    env->CallStaticBooleanMethod(Tools_clz, deleteFilesByDirectory, file);

    env->DeleteLocalRef(file_dir);
    env->DeleteLocalRef(file);


}

__attribute__ ((visibility("hidden")))
JNINativeMethod sdk_methods[] = {
        { "init", "(Landroid/app/Application;)V",(void*)init},
        { "register", "(Landroid/content/Context;)V",(void*)register_wrapper},
};

__attribute__ ((visibility("hidden")))
const char* SDK = "com/anygames/app/SDKWrapper";
__attribute__ ((visibility("hidden")))
void register_native(JNIEnv *env){
    jclass SDKWrapper = env->FindClass(SDK);
    env->RegisterNatives(SDKWrapper, sdk_methods, sizeof(sdk_methods)/sizeof(JNINativeMethod));
}


extern "C"
JNIEXPORT void JNICALL
Java_com_anygames_app_SDKWrapper_register(JNIEnv *env, jclass clazz, jobject base) {

}



JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved) {
    JNIEnv *env;
    if ((*vm).GetEnv(reinterpret_cast<void **>(&env), JNI_VERSION_1_6) == JNI_OK) {
    }else{
    }
    global_jvm = vm;
    register_native(env);
    return onJniLoad(vm,reserved);
}

